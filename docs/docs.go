// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/annonces": {
            "get": {
                "description": "Retrieve all annonces from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annonces"
                ],
                "summary": "Get all annonces",
                "responses": {
                    "200": {
                        "description": "List of annonces",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Annonce"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new annonce with the provided details",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annonces"
                ],
                "summary": "Create annonces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Title of the annonce",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description of the annonce",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Cat ID",
                        "name": "catID",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Annonce created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Annonce"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid fields in the request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/annonces/cats/{catID}": {
            "get": {
                "description": "Retrieve an annonce from the database by its Cat ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annonces"
                ],
                "summary": "Get an annonce by Cat ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cat ID of the annonce to retrieve",
                        "name": "catID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Annonce details",
                        "schema": {
                            "$ref": "#/definitions/models.Annonce"
                        }
                    },
                    "400": {
                        "description": "Invalid Cat ID format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Annonce not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/annonces/{id}": {
            "get": {
                "description": "Retrieve an annonce from the database by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annonces"
                ],
                "summary": "Get an annonce by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the annonce to retrieve",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Annonce details",
                        "schema": {
                            "$ref": "#/definitions/models.Annonce"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Annonce not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Modify the title, description, and cat ID of an existing annonce",
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annonces"
                ],
                "summary": "Modify annonce",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the annonce to modify",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New title of the annonce",
                        "name": "title",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "New description of the annonce",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "New cat ID of the annonce",
                        "name": "catID",
                        "in": "formData"
                    },
                    {
                        "description": "New title of the annonce",
                        "name": "title",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "New description of the annonce",
                        "name": "description",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "New cat ID of the annonce",
                        "name": "catID",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Annonce updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Annonce"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid fields in the request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "User is not authorized to modify this annonce",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Annonce not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an annonce by its ID",
                "tags": [
                    "annonces"
                ],
                "summary": "Delete annonce by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Annonce ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Annonce ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Annonce not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting annonce",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/associations": {
            "get": {
                "description": "Retrieve all associations from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "associations"
                ],
                "summary": "Get all associations",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all associations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Association"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new association with the input payload and a PDF file",
                "consumes": [
                    "multipart/form-data",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "associations"
                ],
                "summary": "Create a new association",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "AddressRue",
                        "name": "addressRue",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CP",
                        "name": "cp",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ville",
                        "name": "ville",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Phone",
                        "name": "phone",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OwnerID",
                        "name": "ownerId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of member IDs",
                        "name": "members",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "PDF file",
                        "name": "kbisFile",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created association",
                        "schema": {
                            "$ref": "#/definitions/models.Association"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/associations/{id}": {
            "get": {
                "description": "Retrieve an association by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "associations"
                ],
                "summary": "Get association by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Association ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved association",
                        "schema": {
                            "$ref": "#/definitions/models.Association"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid association ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found: Association not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update all fields of an association with the given ID",
                "consumes": [
                    "multipart/form-data",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "associations"
                ],
                "summary": "Update an association",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Association ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "AddressRue",
                        "name": "addressRue",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "CP",
                        "name": "cp",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Ville",
                        "name": "ville",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Phone",
                        "name": "phone",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "PDF file",
                        "name": "kbisFile",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of member IDs",
                        "name": "members",
                        "in": "formData"
                    },
                    {
                        "description": "Association payload",
                        "name": "association",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.Association"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated association",
                        "schema": {
                            "$ref": "#/definitions/models.Association"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid association ID or Invalid content type for kbisFile, expected application/pdf",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an association by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "associations"
                ],
                "summary": "Delete an association",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Association ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted association"
                    },
                    "400": {
                        "description": "Bad Request: Invalid association ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found: Association not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/associations/{id}/verify": {
            "put": {
                "description": "Update the verify status of an association with the given ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "associations"
                ],
                "summary": "Update an association's verify status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Association ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Verify status",
                        "name": "verified",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated association",
                        "schema": {
                            "$ref": "#/definitions/models.Association"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Missing association ID, Invalid association ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/{provider}": {
            "get": {
                "description": "Start the authentication process with the specified provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Begin authentication provider callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication Provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication process started",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/{provider}/callback": {
            "get": {
                "description": "Completes user authentication with the specified provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authentication callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication Provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authenticated user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "500": {
                        "description": "Error message",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cats": {
            "get": {
                "description": "Retrieve a list of all cats",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cats"
                ],
                "summary": "Get all cats",
                "responses": {
                    "200": {
                        "description": "List of cats",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Cats"
                            }
                        }
                    },
                    "500": {
                        "description": "error fetching cats",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new cat with the provided details",
                "consumes": [
                    "application/json",
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cats"
                ],
                "summary": "Create cat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Birth Date",
                        "name": "BirthDate",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Sexe",
                        "name": "sexe",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Last Vaccine Date",
                        "name": "LastVaccine",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last Vaccine Name",
                        "name": "LastVaccineName",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Color",
                        "name": "Color",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Behavior",
                        "name": "Behavior",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Sterilized",
                        "name": "Sterilized",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "RaceID",
                        "name": "RaceID",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description",
                        "name": "Description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Reserved",
                        "name": "Reserved",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "UserID",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image",
                        "name": "uploaded_file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "cat created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Cats"
                        }
                    },
                    "400": {
                        "description": "all fields are required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error creating cat",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cats/": {
            "get": {
                "description": "Retrieve cats using their sex, age or race",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cats"
                ],
                "summary": "Get cats by filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "RaceID",
                        "name": "raceId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Age",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sexe",
                        "name": "sexe",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found cats",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Cats"
                            }
                        }
                    },
                    "400": {
                        "description": "An error has occured",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No cats were found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error fetching cats",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cats/user/{userID}": {
            "get": {
                "description": "Retrieve all cats for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cats"
                ],
                "summary": "Get cats by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user's cats",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Cats"
                            }
                        }
                    },
                    "400": {
                        "description": "User ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error fetching cats",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cats/{id}": {
            "get": {
                "description": "Retrieve a cat by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cats"
                ],
                "summary": "Get cat by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found cat",
                        "schema": {
                            "$ref": "#/definitions/models.Cats"
                        }
                    },
                    "400": {
                        "description": "Cat ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cat not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error fetching cat",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the details of an existing cat",
                "consumes": [
                    "application/json",
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cats"
                ],
                "summary": "Update cat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Birth Date",
                        "name": "BirthDate",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Sexe",
                        "name": "sexe",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last Vaccine Date",
                        "name": "LastVaccine",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last Vaccine Name",
                        "name": "LastVaccineName",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Color",
                        "name": "Color",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Behavior",
                        "name": "Behavior",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Sterilized",
                        "name": "Sterilized",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "RaceID",
                        "name": "RaceID",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Description",
                        "name": "Description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Reserved",
                        "name": "Reserved",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "UserID",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Image",
                        "name": "uploaded_file",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cat updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Cats"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid fields in the request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a cat by its ID",
                "tags": [
                    "cats"
                ],
                "summary": "Delete cat by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Cat ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Cat not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting cat",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/favorites": {
            "post": {
                "description": "Create a new favorite with the provided details",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "favorites"
                ],
                "summary": "Create favorites",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the annonce",
                        "name": "annonceID",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "favorite created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Favorite"
                        }
                    },
                    "400": {
                        "description": "annonceID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error creating favorite",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/favorites/users/{userID}": {
            "get": {
                "description": "Get all favorites of the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "favorites"
                ],
                "summary": "Get user favorites",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user favorites",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Favorite"
                            }
                        }
                    },
                    "400": {
                        "description": "user ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "favorites not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error retrieving favorites",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login with the given email and password",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Email and password are required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid password",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "description": "Remove the JWT cookie and redirect to the success page",
                "tags": [
                    "auth"
                ],
                "summary": "Basic logout",
                "responses": {
                    "302": {
                        "description": "Redirect location",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout/{provider}": {
            "get": {
                "description": "Logout from the authentication provider and remove the JWT cookie",
                "tags": [
                    "auth"
                ],
                "summary": "Logout from provider",
                "responses": {
                    "307": {
                        "description": "Redirect location",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/profile/picture": {
            "post": {
                "description": "Modify the profile picture of the authenticated user",
                "consumes": [
                    "multipart/form-data"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Modify profile picture",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Image",
                        "name": "uploaded_file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile picture updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error updating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/races": {
            "get": {
                "description": "Retrieve a list of all race",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "race"
                ],
                "summary": "Get all races",
                "responses": {
                    "200": {
                        "description": "List of race",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Races"
                            }
                        }
                    },
                    "500": {
                        "description": "error fetching races",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new race with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "race"
                ],
                "summary": "Create a new race",
                "parameters": [
                    {
                        "description": "Race object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Races"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created race",
                        "schema": {
                            "$ref": "#/definitions/models.Races"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error creating race",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/races/{id}": {
            "get": {
                "description": "Retrieve one specific race",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "race"
                ],
                "summary": "Get a specific race using its id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the race to retrieve",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Race detail",
                        "schema": {
                            "$ref": "#/definitions/models.Races"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Race not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a race by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "race"
                ],
                "summary": "Update a race",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Race ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Race object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Races"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated race",
                        "schema": {
                            "$ref": "#/definitions/models.Races"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Race not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error updating race",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a race by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "race"
                ],
                "summary": "Delete a race",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Race ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted race"
                    },
                    "400": {
                        "description": "Invalid ID supplied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting race",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ratings": {
            "get": {
                "description": "Récupère toutes les Ratings de la base de données",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Récupérer toutes les Ratings",
                "responses": {
                    "200": {
                        "description": "Liste de toutes les Ratings",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Rating"
                            }
                        }
                    },
                    "500": {
                        "description": "Erreur interne du serveur",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Crée une nouvelle évaluation avec les détails fournis",
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Créer une évaluation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Note de l'évaluation",
                        "name": "mark",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Commentaire sur l'évaluation",
                        "name": "comment",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "ID de l'utilisateur évalué",
                        "name": "userID",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Évaluation créée avec succès",
                        "schema": {
                            "$ref": "#/definitions/models.Rating"
                        }
                    },
                    "400": {
                        "description": "Champs manquants ou invalides dans la requête",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur interne du serveur",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ratings/author/{authorID}": {
            "get": {
                "description": "Récupère toutes les Ratings créées par un auteur spécifique",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Récupérer les Ratings d'un auteur",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID de l'auteur",
                        "name": "authorID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des Ratings par l'auteur",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Rating"
                            }
                        }
                    },
                    "404": {
                        "description": "Auteur non trouvé",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur interne du serveur",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ratings/user/{userID}": {
            "get": {
                "description": "Récupère toutes les Ratings pour un utilisateur spécifique",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Récupérer les Ratings d'un utilisateur",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID de l'utilisateur",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liste des Ratings pour l'utilisateur",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Rating"
                            }
                        }
                    },
                    "404": {
                        "description": "Utilisateur non trouvé",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur interne du serveur",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ratings/{id}": {
            "get": {
                "description": "Récupère une évaluation par son ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Récupérer une évaluation par ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID de l'évaluation à récupérer",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Évaluation récupérée avec succès",
                        "schema": {
                            "$ref": "#/definitions/models.Rating"
                        }
                    },
                    "404": {
                        "description": "Évaluation non trouvée",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur interne du serveur",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Met à jour les détails d'une évaluation existante",
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ratings"
                ],
                "summary": "Mettre à jour une évaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID de l'évaluation à mettre à jour",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Note mise à jour",
                        "name": "mark",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Commentaire mis à jour",
                        "name": "comment",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Évaluation mise à jour avec succès",
                        "schema": {
                            "$ref": "#/definitions/models.Rating"
                        }
                    },
                    "400": {
                        "description": "Champs manquants ou invalides dans la requête",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "L'utilisateur n'est pas autorisé à modifier cette évaluation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Évaluation non trouvée",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur interne du serveur",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Supprime une évaluation existante",
                "tags": [
                    "Ratings"
                ],
                "summary": "Supprimer une évaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID de l'évaluation à supprimer",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Évaluation supprimée avec succès",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "L'utilisateur n'est pas autorisé à supprimer cette évaluation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Évaluation non trouvée",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erreur interne du serveur",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with the given email, password, name, address, cp, and ville",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "addressRue",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "CP",
                        "name": "cp",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Ville",
                        "name": "ville",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "email and password are required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error creating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/rooms": {
            "get": {
                "description": "Get all rooms for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Get all rooms for a user",
                "responses": {
                    "200": {
                        "description": "rooms for the user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Room"
                            }
                        }
                    },
                    "500": {
                        "description": "error getting rooms",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/rooms/{roomID}": {
            "get": {
                "description": "Get all messages for a room in order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rooms"
                ],
                "summary": "Get all messages for a room in order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the room",
                        "name": "roomID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "messages for the room",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "room ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "room not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error getting messages",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieve a list of all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Error fetching users",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new user with the given email, password, name, address, cp, and ville",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "addressRue",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "CP",
                        "name": "cp",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Ville",
                        "name": "ville",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error creating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/annonces/{id}": {
            "get": {
                "description": "Retrieve all annonces for a specific user from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "annonces"
                ],
                "summary": "Get user's annonces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user's annonces",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Annonce"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - missing userID parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/current": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the details of the currently authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get current user",
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "500": {
                        "description": "error finding user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a user by the provided ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieve a user by ID",
                "operationId": "get-user-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "User ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error finding user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete an existing user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "User ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error deleting user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{userId}/associations": {
            "get": {
                "description": "Retrieve all associations for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "associations"
                ],
                "summary": "Get associations by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved associations for user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Association"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid user ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ws/{roomID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Establishes a WebSocket connection to a specified chat room for real-time communication.",
                "summary": "Connect to WebSocket for real-time chat",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the chat room to connect to",
                        "name": "roomID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer token for authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Switching Protocols"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Annonce": {
            "type": "object",
            "properties": {
                "catID": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "models.Association": {
            "type": "object",
            "properties": {
                "addressRue": {
                    "type": "string"
                },
                "cp": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "kbisFile": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/models.User"
                },
                "ownerID": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                },
                "ville": {
                    "type": "string"
                }
            }
        },
        "models.Cats": {
            "type": "object",
            "properties": {
                "behavior": {
                    "type": "string"
                },
                "birthDate": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastVaccine": {
                    "type": "string"
                },
                "lastVaccineName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "picturesURL": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "raceID": {
                    "type": "string"
                },
                "reserved": {
                    "type": "boolean"
                },
                "sexe": {
                    "type": "string"
                },
                "sterilized": {
                    "type": "boolean"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "models.Favorite": {
            "type": "object",
            "properties": {
                "annonceID": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "models.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "roomID": {
                    "type": "integer"
                },
                "senderID": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Races": {
            "type": "object",
            "properties": {
                "cats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Cats"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "raceName": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Rating": {
            "type": "object",
            "properties": {
                "authorID": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "mark": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "models.RoleName": {
            "type": "string",
            "enum": [
                "ADMIN",
                "USER",
                "ASSO"
            ],
            "x-enum-varnames": [
                "AdminRole",
                "UserRole",
                "AssoRole"
            ]
        },
        "models.Roles": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "$ref": "#/definitions/models.RoleName"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Room": {
            "type": "object",
            "properties": {
                "annonceID": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user1ID": {
                    "type": "string"
                },
                "user2ID": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "addressRue": {
                    "type": "string"
                },
                "associations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Association"
                    }
                },
                "cp": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "googleID": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "profilePicURL": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Roles"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "ville": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "GO-challenge-PurrfectMatch",
	Description:      "Swagger de PurrfectMatch",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
