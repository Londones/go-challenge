// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go

// Package queries is a generated GoMock package.
package queries

import (
	models "go-challenge/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserQueries is a mock of UserQueries interface.
type MockUserQueries struct {
	ctrl     *gomock.Controller
	recorder *MockUserQueriesMockRecorder
}

// MockUserQueriesMockRecorder is the mock recorder for MockUserQueries.
type MockUserQueriesMockRecorder struct {
	mock *MockUserQueries
}

// NewMockUserQueries creates a new mock instance.
func NewMockUserQueries(ctrl *gomock.Controller) *MockUserQueries {
	mock := &MockUserQueries{ctrl: ctrl}
	mock.recorder = &MockUserQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserQueries) EXPECT() *MockUserQueriesMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserQueries) CreateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserQueriesMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserQueries)(nil).CreateUser), user)
}

// FindUserByEmail mocks base method.
func (m *MockUserQueries) FindUserByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserQueriesMockRecorder) FindUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserQueries)(nil).FindUserByEmail), email)
}